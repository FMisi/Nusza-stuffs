% === Horner_res_of_division ===
pkg load symbolic;
% Polinomok együtthatói
numerator = [5 -3 0 6]; % Osztando
denominator = [1 2];    % Oszto

disp('Osztando:');
disp(numerator);
disp('Oszto:');
disp(denominator);

% Polinomosztás
[quotient, remainder] = deconv(numerator, denominator);

% Az osztás eredménye szimbolikusan
syms x;
quotient_poly = poly2sym(quotient, x); % Hányados polinomja
remainder_poly = poly2sym(remainder, x); % Maradék polinomja

% Teljes eredmény kifejezése
result = quotient_poly + remainder_poly / poly2sym(denominator, x);

% Eredmények kiírása
disp('Hányados:');
disp(quotient_poly);
disp('Maradék:');
disp(remainder_poly);
disp('Teljes osztás eredménye:');
disp(result);

% x_0 -val...

% x_0 = 2;

% quotient_at_x0 = double(subs(quotient_poly, x, x_0));  % Hányados kiértékelése
% remainder_at_x0 = double(subs(remainder_poly, x, x_0));  % Maradék kiértékelése

% disp(['Hányados x_0 = ', num2str(x_0), ' pontban: ', num2str(quotient_at_x0)]);
% disp(['Maradék x_0 = ', num2str(x_0), ' pontban: ', num2str(remainder_at_x0)]);

% === Horner_eval ===
% x0 helyen vett helyettesitesi ertek Iteralt Horner-elrendezessel

pkg load symbolic;

% Polinom együtthatói
polynomial = [1 5 3 -9];  % A polinom együtthatói

% A kívánt x_0 pont
x_0 = 2;

% Iterált Horner elrendezés alkalmazása
n = length(polynomial);  % A polinom fokszáma
result = polynomial(1);   % Kezdőérték a legnagyobb együtthatóval

for i = 2:n
    result = result * x_0 + polynomial(i);  % Horner elrendezés
end

% Eredmény kiírása
disp(['A polinom értéke x_0 = ', num2str(x_0), ' pontban: ', num2str(result)]);

% === Iterated_Horner ===

pkg load symbolic;

% Polinom együtthatói
polynomial = [1 -1 -3 5 -2];  % A polinom együtthatói: x^4 - x^3 - 3x^2 + 5x - 2

% A kívánt x_0 pont
x_0 = -2;

% Iterált Horner elrendezés alkalmazása
n = length(polynomial);  % A polinom fokszáma
result = polynomial(1);   % Kezdőérték a legnagyobb együtthatóval

for i = 2:n
    result = result * x_0 + polynomial(i);  % Horner elrendezés
end

% Eredmény kiírása
disp(['A polinom értéke x_0 = ', num2str(x_0), ' pontban: ', num2str(result)]);

% Ha a polinom értéke 0, akkor x_0 gyök
if result == 0
    disp(['x_0 = ', num2str(x_0), ' gyöke a polinomnak.']);

    % Gyök szorosának meghatározása
    multiplicity = 0;
    quotient = polynomial;  % Kezdetben a teljes polinom
    while true
        [quotient, remainder] = deconv(quotient, [1, 2]);  % Osztás x + 2-tel
        multiplicity = multiplicity + 1;
        if all(abs(remainder) < 1e-6)  % Ha a maradék elég kicsi
            break;
        end
    end
    disp(['A gyök multiplicitása: ', num2str(multiplicity)]);
else
    disp(['x_0 = ', num2str(x_0), ' nem gyöke a polinomnak.']);
end

% === Lagrange ===

% Adatok
% adatsor: (1; 1); (4; 19); (5; 29)
x = [1, 4, 5]; % x értékek
y = [1, 19, 29]; % y értékek

% Lagrange-polinom számítása
n = length(x);
L = zeros(1, n); % Lagrange-polinom

for k = 1:n
    % A k-adik Lagrange-alappolinom
    P = 1;
    for j = 1:n
        if j ~= k
            P = conv(P, poly(x(j))); % Polinom szorzás
            P = P / (x(k) - x(j));   % Normalizálás
        end
    end
    % L(i, :) = P; % Alappolinom eltárolása
    L = L + y(k) * P; % Súlyozott alappolinom hozzáadása
end

disp('Lagrange-polinom együtthatói:');
disp(L);

% Lagrange-polinom helyettesítési értéke x = 8-ban
x_value = 8;
L_value = polyval(L, x_value);
fprintf('Lagrange-polinom értéke x = 8-ban: %f\n', L_value);

% Elsőfokú közelítő polinom
p1 = polyfit(x, y, 1); % Lineáris (elsőfokú) illesztés
disp('Elsőfokú közelítő polinom együtthatói:');
disp(p1);

% Másodfokú közelítő polinom
p2 = polyfit(x, y, 2); % Kvadratikus (másodfokú) illesztés
disp('Másodfokú közelítő polinom együtthatói:');
disp(p2);

% Lagrange-polinom értéke (már kiszámoltuk korábban)
fprintf('Lagrange-polinom értéke x = 8-ban: %f\n', L_value);

% Elsőfokú közelítő polinom értéke
p1_value = polyval(p1, x_value);
fprintf('Elsőfokú közelítő polinom értéke x = 8-ban: %f\n', p1_value);

% Másodfokú közelítő polinom értéke
p2_value = polyval(p2, x_value);
fprintf('Másodfokú közelítő polinom értéke x = 8-ban: %f\n', p2_value);

% Ellenőrizzük, hogy a Lagrange-polinom interpoláció-e
y_interp = polyval(L, x); % Lagrange-polinom értéke az eredeti pontokban
is_interpolation = all(abs(y_interp - y) < 1e-6);
if is_interpolation
    disp('A Lagrange-polinom interpoláció.');
else
    disp('A Lagrange-polinom nem interpoláció.');
end

% ===== Further_excersises =====
% === Horner-elrendez ===

% Definiáljuk a polinomokat
p = [1 3 -5 8];   % p(x)
q = [1 0 0 1 0 -9]; % q(x)

conv(q,p)

% Kezdjük a Horner-elrendezés kiírását az első együtthatóval
horner_str = sprintf('(%dx', p(1));  % Az első együtthatóval és 'x'-szel, zárójelezve

% Ciklussal hozzáadjuk a többi együtthatót
for i = 2:length(p)
    if p(i) >= 0
        horner_str = sprintf('%s + %d)', horner_str, p(i));  % Ha pozitív, hozzáadjuk zárójelbe
    else
        horner_str = sprintf('%s + (%d)', horner_str, p(i));  % Ha negatív, akkor is " + (-5)" formátumban
    end
    if i < length(p)  % Ha nem az utolsó együttható
        horner_str = sprintf('%s * x', horner_str);  % Hozzáadjuk a szorzást
    end
end

% Kiírjuk a Horner-formát
fprintf('Horner-elrendezés: %s\n', horner_str);


% === === === ===

% Definiáljuk a műveleteket
r = @(x) polyval(p, x) + polyval(q, x);   % r(x) = p(x) + q(x)
s = @(x) polyval(p, x) - polyval(q, x);   % s(x) = p(x) - q(x)
t = @(x) polyval(q, x) / polyval(p, x);   % t(x) = q(x) / p(x)

% A polinom első deriváltjának kiszámítása
u = polyder(p);   % u(x) = p'(x)

% Műveletek végrehajtása:
% Számítsuk ki r(x), s(x), t(x), u(x) értékét x = 5-nél

x_value = 5;

r_value = r(x_value);  % r(x) = p(x) + q(x)
s_value = s(x_value);  % s(x) = p(x) - q(x)
t_value = t(x_value);  % t(x) = q(x) / p(x)
u_value = polyval(u, x_value);  % u(x) = p'(x)

% Eredmények kiírása
fprintf('r(5) = %f\n', r_value);
fprintf('s(5) = %f\n', s_value);
fprintf('t(5) = %f\n', t_value);
fprintf('u(5) = %f\n', u_value);


% === === === ===

function [quotient, remainder] = ruffini(p, x)
    % p: a polinom együtthatói
    % x: a keresett gyök
    n = length(p);
    quotient = zeros(1, n-1);  % Quotient együtthatói
    remainder = p(1);  % Kezdeti maradék
    for i = 2:n
        quotient(i-1) = remainder * x + p(i);
        remainder = quotient(i-1);
    end
    disp("quotient:");
    disp(quotient);
    disp("remainder:");
    disp(remainder);
end

disp("Ruffini:");
disp(ruffini(p, 2));

% === === === ===

% Definiáljuk a polinomokat
p = [1 3 -5 8];   % p(x) = x^3 + 3x^2 - 5x + 8
q = [1 0 0 1 0 -9]; % q(x) = x^5 + x^2 - 9

% Ellenőrizzük, hogy t(1.5) = 0-e
x_value = 1.5;
t_value = polyval(q, x_value) / polyval(p, x_value);   % t(x) = q(x) / p(x)

% Kiírjuk, hogy t(1.5) = 0-e
fprintf('t(1.5) = %f\n', t_value);

[T1,T2] = deconv(q,p);
disp('Osztas:');
disp(T1);
disp(T2);
disp('Szorzas:');

% p(x) gyökeinek meghatározása
p_roots = roots(p);
fprintf('p(x) gyökei: \n');
disp(p_roots);

% q(x) gyökeinek meghatározása
q_roots = roots(q);
fprintf('q(x) gyökei: \n');
disp(q_roots);

% === === === ===

disp('roots([1 2]):');
disp(roots([1 2]));

% === === === ===

pkg load symbolic;

% Definiáljuk a mátrixot
A = [1 1 -1; 2 -2 0; 1 0 5];

% Szimbólum definíció a karakterisztikus polinomhoz
syms lambda;

% Karakterisztikus polinom meghatározása
% char_poly = det(A - lambda * eye(size(A)));
char_poly = poly(A);

% Eredmény kiíratása
disp('A karakterisztikus polinom:');
disp(char_poly);

% === === === ===

disp('A Sajaterteke:');
disp(eig(A));

% === === === ===

% ===== Modszerek =====
% ===== Szelo modszer =====
% Függvény definíció
f = @(x) x^3 + 2*x - 7;

% Kezdőpontok
x0 = -1;
x1 = 3;

% Első iteráció
f_x0 = f(x0);
f_x1 = f(x1);
x2 = x1 - (f_x1 * (x1 - x0)) / (f_x1 - f_x0);

% Második iteráció
f_x2 = f(x2);
x3 = x2 - (f_x2 * (x2 - x1)) / (f_x2 - f_x1);

% Eredmények
fprintf('Első iteráció eredménye (Szelo): x2 = %f\n', x2);
fprintf('Második iteráció eredménye (Szelo): x3 = %f\n', x3);

% ===== Hur modszer =====
% Definiáljuk a függvényt
f = @(x) x^3 + 2*x - 7;

% Kezdeti értékek
x0 = -1;
x1 = 3;

% Első iteráció
x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0));

% Második iteráció
x3 = x2 - f(x2) * (x2 - x1) / (f(x2) - f(x1));

% Eredmények kiírása
fprintf('Első iteráció (Hur): x2 = %.6f\n', x2);
fprintf('Második iteráció (Hur): x3 = %.6f\n', x3);

% ===== Newton modszer =====
% Definiáljuk a függvényt és annak deriváltját
f = @(x) x^3 + 2*x - 7;
f_prime = @(x) 3*x^2 + 2;

% Kezdeti érték
x0 = 1;

% Első iteráció
x1 = x0 - f(x0) / f_prime(x0);

% Második iteráció
x2 = x1 - f(x1) / f_prime(x1);

% Eredmények kiírása
fprintf('Első iteráció (Newt): x1 = %.6f\n', x1);
fprintf('Második iteráció (Newt): x2 = %.6f\n', x2);


% ===== Double_integral =====

% Trapézszabály megvalósítása
function result = trapezoidal_integral(f, a, b, n)
    % f: integrálandó függvény
    % a: alsó határ
    % b: felső határ
    % n: intervallumok száma

    h = (b - a) / n;  % lépésköz
    x = a:h:b;        % osztópontok
    y = f(x);         % függvényértékek az osztópontokban

    % Trapézszabály képlete
    result = h * (0.5 * y(1) + sum(y(2:end-1)) + 0.5 * y(end));
end

% Példa: f(x) = x^2, [0, 2] intervallum, 10 részintervallum
f = @(x) x.^2;
a = 0;
b = 2;
n = 10;

result = trapezoidal_integral(f, a, b, n);
fprintf('A közelítő integrál eredménye: %.6f\n', result);

% Kettős integrál trapézszabállyal
function result = trapezoidal_double_integral(f, a, b, c, d, nx, ny)
    % f: integrálandó függvény, pl. @(x, y) x^2 + y^2
    % [a, b]: x-intervallum
    % [c, d]: y-intervallum
    % nx, ny: intervallumok száma x és y irányban

    hx = (b - a) / nx;  % x-lépésköz
    hy = (d - c) / ny;  % y-lépésköz

    x = linspace(a, b, nx+1);  % x-értékek
    y = linspace(c, d, ny+1);  % y-értékek

    % Trapézszabály alkalmazása
    result = 0;
    for i = 1:nx+1
        for j = 1:ny+1
            weight = 1;
            if i == 1 || i == nx+1
                weight = weight / 2;
            end
            if j == 1 || j == ny+1
                weight = weight / 2;
            end
            result = result + weight * f(x(i), y(j));
        end
    end
    result = result * hx * hy;
end

% Példa: f(x, y) = x^2 + y^2, [0, 1] x [0, 1] intervallum, 10x10 felosztás
f = @(x, y) x.^2 + y.^2;
a = 0; b = 1; c = 0; d = 1;
nx = 10; ny = 10;

result = trapezoidal_double_integral(f, a, b, c, d, nx, ny);
fprintf('A kettős integrál eredménye: %.6f\n', result);
